锁释放的三种情况:
    1,执行完同步代码块就会释放对象的锁
    2,在执行同步代码块的过程中,遇到异常而导致线程终止,锁也会被释放
    3,在执行同步代码块的过程中,锁对象调用了wait()方法,这个线程会释放锁对象,而此线程会进入线程等待状态,等待被唤醒

除了以上三种情况,只要持有锁对象的线程没有执行完同步代码块,就不会释放锁,因此,下面三种情况,线程不会释放锁:
    1,在执行同步代码块的过程中,执行了Thread.sleep()方法,当前线程放弃CPU执行,但是是带着锁进行休眠,不会释放锁
    2,在执行同步代码块的过程中,执行了Thread.yield()方法,当前线程放弃CPU执行,重新抢夺CPU资源,但是不会释放锁
    3,在执行同步代码块的过程中,其他线程执行了当前对象的suspend()方法,当前线程被暂停,但是不会释放锁对象

关于调用notify()方法:
    在执行了notify()方法之后,当前线程不会马上释放锁对象, 在wait等待状态的线程也不能马上获取该锁对象,
    要等到执行notify()方法的线程将同步代码块执行结束之后,也就是退出了synchronized同步代码块后,当前线程才会释放锁